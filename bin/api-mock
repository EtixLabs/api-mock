#!/usr/bin/env node
var optimist = require('optimist');
var parsePackageJson = require('../lib/parse-package-json');
var path = require('path');
var ApiMock = require('../lib/api-mock');
var CorsSupport = require('../lib/cors-support');

var version = parsePackageJson(path.join(__dirname, '../package.json'));

options = {
  port: {
    alias: "p",
    description: "Set which port api-mock should listen on.\n",
    'default': 3000
  },
  'cors-disable': {
    alias: "c",
    description: "Disable CORS headers.\n",
    'default': false
  },
  help: {
    description: "Show usage information.\n"
  },
  version: {
    description: "Show version number.\n"
  }
}

var argv = optimist
    .usage("Usage: \n  " + "api-mock <path to blueprint>  [OPTIONS]"
     + "\n\nExample: \n  " + "api-mock ./apiary.md --port 3000")
    .options(options)
    .boolean('cors-disable')
    .wrap(80)
    .argv;

if (argv.help == true) {
  optimist.showHelp(fn=console.error);
  process.exit(0);
}

if (argv.version == true) {
  console.log(version);
  process.exit(0);
}

if (argv._[0] == undefined) {
  console.error("Error: Must specify path to blueprint file.");
  console.error("\n")
  optimist.showHelp(fn=console.error);
  process.exit(1);
}

configuration = {
  'blueprintPath': argv._[0],
  'options': argv
}

process.on( 'SIGINT', function() {
  process.exit(0);
});

try {
  apiMock = new ApiMock(configuration);
  if(!configuration.options['cors-disable']) {
    corsSupport = new CorsSupport(apiMock.app);
  }

  apiMock.run();
  console.log('Listening on port ' + configuration.options.port)
} catch(e) {
  console.error(e + '\n' + e.stack);
  process.exit(1);
}
